// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String?   // For credential authentication
  avatar        String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Authentication
  accounts Account[]
  sessions Session[]

  // User data
  preferences  UserPreferences?
  bookings     Booking[]
  priceAlerts  PriceAlert[]
  notifications Notification[]
  searches     SearchHistory[]

  @@map("users")
}

model UserPreferences {
  id        String @id @default(cuid())
  userId    String @unique
  currency  String @default("INR")
  language  String @default("en")
  timezone  String @default("UTC")
  
  // Notification preferences
  emailNotifications     Boolean @default(true)
  browserNotifications   Boolean @default(true)
  priceAlerts           Boolean @default(true)
  bookingUpdates        Boolean @default(true)
  marketingEmails       Boolean @default(false)
  
  // Default search preferences
  defaultTravelClass    String @default("economy")
  defaultAdults         Int    @default(1)
  defaultChildren       Int    @default(0)
  defaultInfants        Int    @default(0)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Booking {
  id           String   @id @default(cuid())
  userId       String
  type         String   // 'flight', 'train', 'hotel', 'package'
  status       String   @default("pending")
  reference    String   @unique
  bookingDate  DateTime @default(now())
  travelDate   DateTime
  returnDate   DateTime?
  
  // JSON fields for flexible booking details
  details      String   // JSON: BookingDetails
  payment      String   // JSON: PaymentInfo
  cancellation String?  // JSON: CancellationInfo
  
  user          User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  modifications BookingModification[]

  @@map("bookings")
}

model BookingModification {
  id          String   @id @default(cuid())
  bookingId   String
  type        String   // 'date_change', 'passenger_change', etc.
  requestedAt DateTime @default(now())
  processedAt DateTime?
  status      String   @default("pending")
  cost        Float    @default(0)
  details     String   // JSON: modification details
  
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("booking_modifications")
}

model SearchHistory {
  id           String   @id @default(cuid())
  userId       String
  searchParams String   // JSON: SearchParams
  results      String   // JSON: SearchResults
  timestamp    DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("search_history")
}

model PriceAlert {
  id           String    @id @default(cuid())
  userId       String
  searchParams String    // JSON: SearchParams
  targetPrice  Float
  currentPrice Float
  isActive     Boolean   @default(true)
  triggeredAt  DateTime?
  createdAt    DateTime  @default(now())
  expiresAt    DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("price_alerts")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // 'price_drop', 'booking_update', etc.
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  data      String?  // JSON: additional data
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model PricePrediction {
  id             String   @id @default(cuid())
  searchId       String
  currentPrice   Float
  predictedPrice Float
  confidence     Float    // 0-1
  trend          String   // 'up', 'down', 'stable'
  recommendation String   // 'book_now', 'wait', 'monitor'
  validUntil     DateTime
  factors        String   // JSON: prediction factors
  createdAt      DateTime @default(now())

  @@map("price_predictions")
}

model Location {
  id      String @id @default(cuid())
  name    String
  code    String @unique
  city    String
  country String
  type    String // 'airport', 'station', 'city'
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("locations")
}
